#lang r5rs

(#%require "r5rs-boost.scm")
(#%require "binary-tree.scm")

(define (make-table)
  (let ((local-table (list '*table*)))
    (define (assoc key records)
      (if (null? records)
        #f
        (records 'lookup key)))
    (define (lookup key)
      (define (lookup-iter key table)
        (if (null? key)
          (cdr table)
          (let ((record (assoc (car key) (cdr table))))
            (if record
              (lookup-iter (cdr key) record)
              #f))))
      (lookup-iter key local-table))
    (define (insert! key value)
      (define (insert-iter! key table)
        (if (null? key)
          (set-cdr! table value)
          (if (null? (cdr table))
            (let ((new-tree (empty-tree)))
              (let ((new-entry (list (car key))))
                (new-tree 'insert new-entry)
                (set-cdr! table new-tree)
                (insert-iter! (cdr key) new-entry)))
            (let ((record (assoc (car key) (cdr table))))
              (if record
                (insert-iter! (cdr key) record)
                (let ((new-entry (list (car key))))
                  ((cdr table) 'insert new-entry)
                  (insert-iter! (cdr key) new-entry)))))))
      (insert-iter! key local-table)
      'ok)
    (define (dispatch op . args)
      (cond ((eq? op 'lookup) (lookup (car args)))
            ((eq? op 'insert!) (insert! (car args) (cadr args)))
            (else
              (error "Unknow operation -- TABLE" op))))
    dispatch))

;;; test
; (define (display-ln a)
;   (display a)
;   (newline))

; (define t1 (make-table))
; (t1 'insert! '(1) 'a)
; (t1 'insert! '(3 4) 'c)
; (t1 'insert! '(3 1) 'i)
; (t1 'insert! '(2) 'b)
; (t1 'insert! '(5 6) 'd)
; (t1 'insert! '(7 8 9) 'e)
; (t1 'insert! '(10 11 12) 'f)
; (t1 'insert! '(13 14 15 16 17 18 19 20) 'g)

; (display-ln (t1 'lookup '(1)))
; (display-ln (t1 'lookup '(3 4)))
; (display-ln (t1 'lookup '(3 1)))
; (display-ln (t1 'lookup '(2)))
; (display-ln (t1 'lookup '(5 6)))
; (display-ln (t1 'lookup '(7 8 9)))
; (display-ln (t1 'lookup '(10 11 12)))
; (display-ln (t1 'lookup '(13 14 15 16 17 18 19 20)))

; ((t1 'lookup '(3)) 'print)
; (display-ln (t1 'lookup '(24 25)))
; (t1 'insert! '(13 14 15 16 17 18 19 20) 'h)
; (display-ln (t1 'lookup '(13 14 15 16 17 18 19 20)))

